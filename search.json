[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Resume",
    "section": "",
    "text": "Education\n\n\nUniversity of Arkasnas\nPh.D. in Industrial Engineering\n\n\nFayetteville, Arkansas\n2012 - 2017\n\n\n\nDissertation: Service Consistency in Vehicle Routing \n\n\n\nHuazhong University of Science and Technology\nM.S. in Industrial Engineering\n\n\nWuhan, China 2009 - 2012\n\n\n\n\nHuazhong University of Science and Technology\nB.S. in Industrial Engineering\n\n\nWuhan, China 2005 - 2009\n\n\n\n\nExperience\n\n\nMarriott Vacations Worldwide\n\n\nOctober 2023 - present\n\n\nPrincipal Data Scientist / Associate Director - Data Science\n\nCampaign targeting optimization.\nCapacity planning in a two-sided marketplace.\nPropensity modeling.\n\n\n\nWalmart\n\n\nMay 2016 - August 2023\n\n\nPrincipal Data Scientist\n\nOversaw all order optimization initiatives for Walmart grocery and regional distribution center (GDC&RDC) network as principal data scientist, focusing on improving efficiencies in GDC&RDC inbound and outbound replenishment operations.\nLed the development of truckload optimization (TLO) engine as the core of the next-gen inbound replenishment system that optimizes order quantities from vendors to DCs, enabled its rollout to 10,000+ lanes to replace legacy TLO.\nDesigned and implemented a truck planning optimization (TPO) engine to smooth ship point volumes and reduce unplanned truck needs, anticipating a $9 million reduction in transportation costs for Q4 2023.\nBuilt an outbound order optimization (O3) engine using mixed-integer programming (MIP) and linear regression for GDCs and RDCs to smooth store inbound volumes, improve truck arrival time consistency and facilitate store labor planning.\nDevised a network planning model employing integer programming (IP) and K-means clustering to optimize shipment consolidation efficiency for Walmart’s largest inbound transportation network.\nTech stack: Python, Java, Google OR-Tools, CPLEX | IP, MIP, Heuristics, Linear regression, Clustering\n\nStaff Data Scientist\n\nDesigned and implemented a cloud-based distributed shipment consolidation engine for Walmart’s high-volume inbound transportation network, optimizing 100,000+ shipments during peak periods. It consists of a heuristic-driven partition engine to segment the network, a column generation-based consolidation engine that iteratively identifies cost-effective candidate loads, and a MIP-based picking engine for final load selection. Realized $1 million monthly transportation cost reductions in 2023, with progress toward replacing the current industry-leading commercial solver.\nDeveloped a rapid heuristic algorithm for solving the fixed sequence 3D bin packing problem in GDC pallet building process, addressing the 6-month learning curve and high turnover rates for new hires. Attained an average of 20s for full pallet building with 100+ heterogeneous cases, yielding 85+% packing efficiency and 80+% pallet stability. Conducted successful pilots in 2 GDCs, revealing a 70% decrease in the learning curve and an anticipated $10 million yearly savings if used across all GDCs.\nAssisted the global logistics team in selecting optimal ocean carriers and reducing total transportation costs, resulting in a cost reduction of $90 million during the challenging disruptions of the COVID-19 impacted global supply chain in fiscal year 2021.\nTech stack: Java, CPLEX, SpringBoot Microservices | Column Generation, MIP, Vehicle Routing/Bin Packing Heuristics\n\nSenior Data Scientist\n\nConceptualized and developed a profiling application prototype, enabling GDCs to attain optimal item-to-slot assignments. Participated in end-to-end system development encompassing both frontend and backend components.\nOverhauled legacy MIP-based optimization engine for optimal carrier and load quantity determination in Walmart’s ocean procurement during fiscal year 2020. Strengthened modeling capabilities and constraint adaptability to encompass operational and strategic factors. Offered on-site optimization support across numerous bidding cycles, resulting in $30 million operational cost savings, noteworthy labor hour reduction, and heightened stability within the Walmart supply chain.\nTech Stack: Java, JavaScript | MIP, Heuristics\n\nData Scientist\n\nConstructed a column-generation-driven optimization engine in a rolling horizon framework, focusing on assigning drivers to tractors to optimize tractor utilization and reduce driver split-seat instances. Generated $4 million labor cost savings and $8 million operational cost savings annually through this approach.\nImplemented a column-generation-based optimization engine to estimate store-level customer purchase probability based on historical transaction data. Built a MIP engine to decide optimal offer set for each category at store level.\nMigrated legacy truckload optimization COBOL code to Java, reducing data processing time from 10 minutes to 10 seconds. Developed heuristic algorithms to solve instances with large number of orders, resulting in a daily reduction of 14 trucks.\nTech stack: Java, COBOL | Column Generation, MIP, Heuristics\n\nGlobal Business Process Intern\n\nContributed to the implementation and validation of next generation inventory optimization model for Walmart U.S., yielding an 8% improvement over the existing system in pilot store trials. Spearheaded the data platform migration from Teradata to Hadoop, implementing data ETL processes and Hive queries.\n\n\n\nPatents\n\n\nMethods and Apparatus for Automatic Item Placement\nKunlei Lian, Cai Gao, Cong Guo, Mingang Fu\n\n\n2024\n\n\nThis patent presents a highly efficient optimization algorithm to solve the three-dimensional bin packing problem in the context of pallet building and container loading. The algorithm is able to stack highly heterogeneous items in a near-optimal way to maximize space utilization and more importantly stability.\n\n\nLoad Builder Optimizer using a Column Generation Engine\nKunlei Lian, Ming Ni, Mingang Fu\n\n\n2023\n\n\nThis patent presents a column generation-based optimization engine to solve shipment pickup and delivery problems. It aims to consolidate hundreds of thousands of shipments on a daily basis over Walmart’s vast inbound network and move them from their origins to their corresponding destinations while utilizing consolidation center capacities as much as possible to save transportation costs.\n\n\nSystems and Methods for Driver Scheduling\nKunlei Lian, Ming Ni, Mingang Fu\n\n\n2022\n\n\nThis patent introduces a column generation-based rolling horizon optimization engine that optimizes the assignment of drivers to tractors. This critical process significantly influences operational efficiency and costs within the Walmart private fleet. The solution is able to minimize the split-seats among drivers while maximizing tractor utilization.\n\n\nSystems and Methods for Safety Stock Settings Using a Parallel Processing Computing Architecture\nShuohao Wu, Richard Ulrich, Dong Xu, Jingying Zhang, Kunlei Lian, Clifford Bolinger, Jackie Guan\n\n\n2020\n\n\nThis patent features a Monte Carlo simulation-based stochastic optimization engine that employs GPU computing to optimize safety stock level settings across the chain, achieving reduced total inventory costs without impacting overall sales.\n\n\nPublications\n\nChang Lv, Chaoyong Zhang, Kunlei Lian, Yaping Ren and Leilei Meng. A two-echelon fuzzy clustering based heuristic for large-scale bike sharing repositioning problem. Transportation Research Part B: Methodological 160 (2022): 54-75.\nJianzhao Wu, Kunlei Lian, Yelin Deng, Ping Jiang and Chaoyong Zhang. Multi-Objective Parameter Optimization of Fiber Laser Welding Considering Energy Consumption and Bead Geometry. IEEE Transactions on Automation Science and Engineering vol. 19 issue 4 (2021): 3561-3574\nChunjiang Zhang, Jiawei Tan, Kunkun Peng, Liang Gao, Weiming Shen, Kunlei Lian. A discrete whale swarm algorithm for a hybrid flow-shop scheduling problem with limited buffers. Robotics and Computer-Integrated Manufacturing (2020).\nChang Lv, Chaoyong Zhang, Kunlei Lian, Yaping Ren, and Leilei Meng. A hybrid algorithm for the static bike-sharing re-positioning problem based on an effective clustering strategy. Transportation Research Part B: Methodological 140 (2020): 1-21.\nYang Xie, Kunlei Lian, Qiong Liu, Chaoyong Zhang, and Hongqi Liu. Digital twin for cutting tool: Modeling, application and service strategy. Journal of Manufacturing Systems (2020).\nChunjiang Zhang, Yin Zhou, Kunkun Peng, Xinyu Li, Kunlei Lian, and Suyan Zhang. Dynamic flexible job shop scheduling method based on improved gene expression programming. Measurement and Control (2020).\nKunlei Lian, Ashlea Bennett Milburn, and Ronald L. Rardin. An improved multi-directional local search algorithm for the multi-objective consistent vehicle routing problem. IIE Transactions 48, no. 10 (2016): 975-992.\nChuanjun Zhu, Jing Cao, Chaoyong Zhang, Kunlei Lian. Applying modified colonial competitive algorithm to solve minimal hitting set problems. China Mechanical Engineering 26, no. 7 (2015): 917-923\nKunlei Lian, Chaoyong Zhang, Liang Gao, and Xinyu Shao. A modified colonial competitive algorithm for the mixed-model U-line balancing and sequencing problem. International Journal of Production Research 50, no. 18 (2012): 5117-5131.\nKunlei Lian, Chaoyong Zhang, Liang Gao, and Xinyu Li. Integrated process planning and scheduling using an imperialist competitive algorithm. International Journal of Production Research 50, no. 15 (2012): 4326-4343.\nKunlei Lian, Chaoyong Zhang, Xinyu Shao, and Liang Gao. Optimization of process planning with various flexibilities using an imperialist competitive algorithm. The International Journal of Advanced Manufacturing Technology 59, no. 5-8 (2012): 815-828.\nKunLei Lian, ChaoYong Zhang, XinYu Shao, and YaoHui Zeng. A multi-dimensional tabu search algorithm for the optimization of process planning. Science China Technological Sciences 54, no. 12 (2011): 3211-3219.\nKun Zhang, Hui Liu, and Kunlei Lian. Application of bee colony optimization algorithm in warehouse facility location of rail transit network. Modern Urban Transit 1, (2011): 63-66\nFuping Deng, Chaoyong Zhang, Kunlei Lian and Shaotan Xu. An adaptive ant colony optimization for solving assembly line balancing problem. China Mechanical Engineering 22, no. 16 (2011):1949-1953, 1959.\nKunlei Lian, Chaoyong Zhang, Liang Gao, Shaotan Xu, and Yi Sun. A cooperative simulated annealing algorithm for the optimization of process planning. In Advanced Materials Research, vol. 181, pp. 489-494. Trans Tech Publications Ltd, 2011.\nKunlei Lian, Chaoyong Zhang, Liang Gao and Chaoyang Zhang. An improved genetic algorithm for multi-objective dynamic scheduling optimization. Machine Design and Manufacturing Engineering 39, no. 3 (2010):13-17, 21"
  },
  {
    "objectID": "docs/blog/posts/2024-04-02-pareto-front/index.html",
    "href": "docs/blog/posts/2024-04-02-pareto-front/index.html",
    "title": "Multi-objective Optimization and Pareto Front",
    "section": "",
    "text": "I recently came across a multi-objective optimization problem at work and I need to identify the Pareto front - the set of non-dominating solutions among all the candidate solutions. I used to study multi-objective optimization problems and algorithms in my Ph.D. years, it is nice to actually use it in my work. In this post, I will explain some key concepts and some useful techniques:"
  },
  {
    "objectID": "docs/blog/posts/2024-04-02-pareto-front/index.html#multi-objective-optimization",
    "href": "docs/blog/posts/2024-04-02-pareto-front/index.html#multi-objective-optimization",
    "title": "Multi-objective Optimization and Pareto Front",
    "section": "Multi-Objective Optimization",
    "text": "Multi-Objective Optimization\nMulti-objective optimization is an area of mathematical optimization that deals with problems involving more than one objective function to be optimized simultaneously. Each objective function may represent a different criterion, and these criteria often conflict with each other. The goal in multi-objective optimization is not to find a single solution that optimizes a single criterion, but rather to find solutions that achieve a satisfactory balance among all the criteria.\nMulti-objective optimization is used in many fields where trade-offs between two or more outcomes must be negotiated, such as:\n\nEngineering Design: Optimizing design parameters for competing objectives like cost, performance, and safety.\nEconomics and Finance: Balancing return and risk in portfolio management.\nEnergy Management: Managing the trade-offs between cost, environmental impact, and efficiency.\nLogistics and Transportation: Optimizing routes and schedules to minimize costs and time while maximizing customer satisfaction.\n\nThe main challenges in multi-objective optimization include handling the complexity and computational cost of finding multiple optimal solutions, choosing appropriate methods and algorithms that fit the specific characteristics of the problem, and effectively assisting decision-makers in selecting from among the set of optimal solutions based on their preferences and the trade-offs they are willing to make."
  },
  {
    "objectID": "docs/blog/posts/2024-04-02-pareto-front/index.html#pareto-dominance-and-pareto-front",
    "href": "docs/blog/posts/2024-04-02-pareto-front/index.html#pareto-dominance-and-pareto-front",
    "title": "Multi-objective Optimization and Pareto Front",
    "section": "Pareto Dominance and Pareto Front",
    "text": "Pareto Dominance and Pareto Front\nA solution x is said to Pareto dominate another solution y if and only if:\n\nx is no worse than y in all objectives, and\nx is strictly better than y in at least one objective.\n\nIn mathematical terms, considering a minimization problem with objectives f_1, f_2, \\cdots, f_k:\n\nx Pareto dominates y if for all i \\in \\{1, 2, \\cdots, k\\}, f_i(x) \\leq f_i(y) and there exists at least one j such that f_i(x) &lt; f_i(y).\n\nThis concept allows decision-makers to sift through multiple feasible solutions to identify those that are not dominated by any other, helping them focus on the most promising solutions.\nThe Pareto front consists of all solutions that are not Pareto dominated by any other solution. These solutions are also known as Pareto optimal solutions. The Pareto front is particularly useful because it contains all possible trade-offs that a decision-maker can consider, providing a clear visualization of how one can improve one objective only at the expense of another."
  },
  {
    "objectID": "docs/blog/posts/2024-04-02-pareto-front/index.html#identify-pareto-front-in-python",
    "href": "docs/blog/posts/2024-04-02-pareto-front/index.html#identify-pareto-front-in-python",
    "title": "Multi-objective Optimization and Pareto Front",
    "section": "Identify Pareto Front in Python",
    "text": "Identify Pareto Front in Python\nThere is a package, paretoset, that could help us identify all the non-dominating solutions in multi-objective optimization. The installation is straightforward:\npip install paretoset\nTo illustrate the usage of this package, we will use a bi-objective optimization problem as an example. Suppose we identified a list of candidate solutions with corresponding objective values for this problem, as shown in the data frame below:\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({'obj1': [0.5, 1.0, 2, 2.5, 3.0, 3.5, 4.0, 5.0, 6.0, 1, 2, 3, 4, 5, 0.5, 1, 1.5, 2, ], \n                   'obj2': [5.8, 5.5, 5, 4.8, 4.5, 4.0, 3.5, 2.6, 1.0, 5, 4, 3, 2, 0.5, 2, 4, 2.5, 2, ]})\ndf\n\n\n\n\n\n\n\n\n\nobj1\nobj2\n\n\n\n\n0\n0.5\n5.8\n\n\n1\n1.0\n5.5\n\n\n2\n2.0\n5.0\n\n\n3\n2.5\n4.8\n\n\n4\n3.0\n4.5\n\n\n5\n3.5\n4.0\n\n\n6\n4.0\n3.5\n\n\n7\n5.0\n2.6\n\n\n8\n6.0\n1.0\n\n\n9\n1.0\n5.0\n\n\n10\n2.0\n4.0\n\n\n11\n3.0\n3.0\n\n\n12\n4.0\n2.0\n\n\n13\n5.0\n0.5\n\n\n14\n0.5\n2.0\n\n\n15\n1.0\n4.0\n\n\n16\n1.5\n2.5\n\n\n17\n2.0\n2.0\n\n\n\n\n\n\n\n\nPutting all the solutions in a plot creates a graph as in below:\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nax.scatter(df['obj1'], df['obj2'], s=12)\nax.set_xlabel('Objective 1')\nax.set_ylabel('Objective 2')\nax.set_title('All candidate solutions')\n\nfor idx, row in df.iterrows():\n    ax.annotate(f'({row['obj1']}, {row['obj2']})', (row['obj1']-0.25, row['obj2'] + 0.1))\n\nfig.tight_layout()\n\n\n\n\n\n\n\n\nAssume we aim to maximize both objectives, it is clear that some solutions are dominated by other solutions. For example, the solution (0.5, 2.0) on the left is worse than the solution (2.0, 4.0) in both objectives.\nTo use the paretoset package, simply pass all the objectives and their corresponding objective sense to the paretoset class. The result will indicate which solution is a non-dominated solution.\n\nfrom paretoset import paretoset\n\ndf['efficient'] = paretoset(df[['obj1', 'obj2']],\n                            sense=('max', 'max'))\n\n\ndf\n\n\n\n\n\n\n\n\n\nobj1\nobj2\nefficient\n\n\n\n\n0\n0.5\n5.8\nTrue\n\n\n1\n1.0\n5.5\nTrue\n\n\n2\n2.0\n5.0\nTrue\n\n\n3\n2.5\n4.8\nTrue\n\n\n4\n3.0\n4.5\nTrue\n\n\n5\n3.5\n4.0\nTrue\n\n\n6\n4.0\n3.5\nTrue\n\n\n7\n5.0\n2.6\nTrue\n\n\n8\n6.0\n1.0\nTrue\n\n\n9\n1.0\n5.0\nFalse\n\n\n10\n2.0\n4.0\nFalse\n\n\n11\n3.0\n3.0\nFalse\n\n\n12\n4.0\n2.0\nFalse\n\n\n13\n5.0\n0.5\nFalse\n\n\n14\n0.5\n2.0\nFalse\n\n\n15\n1.0\n4.0\nFalse\n\n\n16\n1.5\n2.5\nFalse\n\n\n17\n2.0\n2.0\nFalse\n\n\n\n\n\n\n\n\nTo visualize the resulting non-dominated solutions (among all the solutions), we mark them using a different color (yellow) from the dominated solutions (purple) in the graph below.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nax.scatter(df['obj1'], df['obj2'], s=12, c=df['efficient'])\nax.set_xlabel('Objective 1')\nax.set_ylabel('Objective 2')\nax.set_title('All candidate solutions')\n\nfor idx, row in df.iterrows():\n    ax.annotate(f'({row['obj1']}, {row['obj2']})', (row['obj1']-0.25, row['obj2'] + 0.1))\n\nfig.tight_layout()"
  },
  {
    "objectID": "docs/blog/posts/2024-02-20-python-jupyter-setup/index.html",
    "href": "docs/blog/posts/2024-02-20-python-jupyter-setup/index.html",
    "title": "Python Virtual Environment Setup",
    "section": "",
    "text": "Just save the list of commands I use frequently to create virtual environments and make them available to jupyter notebooks.\n# create a new virtual environemnt named 'env_name'\nconda create -n 'env_name'\n\n# activate the newly created virtual environment\nconda activate 'env_name'\n\n# list all available environments\nconda env list\n\n# remove an virtual environment\nconda env remove -n 'env_name'\n\n# install ipykernel\npip install --user ipykernel\n\n# add the virtual environment to jupyter\npython -m ipykernel install --user --name='env_name'\n\n# list available jupyter kernels\njupyter kernelspec list\n\n# remove kernel from jupyter\njupyter kernelspec uninstall 'env_name'"
  },
  {
    "objectID": "docs/blog/posts/2024-02-15-site-revamp/index.html",
    "href": "docs/blog/posts/2024-02-15-site-revamp/index.html",
    "title": "Site Revamp using Quarto",
    "section": "",
    "text": "I have probably spent more time revamping my personal website than actually writing contents for it. Every once in a while, I would feel the site that I put up some time ago becomes too ugly to motivate me to update it. Since I have gradually used more Quarto to write my books and it also has the functionality to build website, I feel it’s time to yet again revamp my blog using Quarto. Hopefully, this is the last time."
  },
  {
    "objectID": "docs/blog/posts/2024-02-29-plot-synchronized-colors/index.html",
    "href": "docs/blog/posts/2024-02-29-plot-synchronized-colors/index.html",
    "title": "Synchronized Colors in Python Plots",
    "section": "",
    "text": "Today I came across a case for which I need put two figures side by side and I would like to use the same color to indicate the same element across the figures. After some searching on the internet, here is the solution I settled on.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme()\n\ndata_a = pd.Series(data=[1, 2, 3, 4], index=['Dog', 'Cat', 'Rabbit', 'Horse'])\ndata_b = pd.Series(data=[4, 2, 3, 5], index=['Cat', 'Horse', 'Fish', 'Cow'])\n\nindex_set = set()\nindex_set.update(data_a.index)\nindex_set.update(data_b.index)\n\ncm = plt.get_cmap('rainbow')\ncolors = [cm(1.0 * i / len(index_set)) for i in range(len(index_set))]\ncolor_dict = {label: color for label, color in zip(index_set, colors)}\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\npatches, texts, autotexts = axes[0].pie(data_a,\n            labels=data_a.index,\n            colors=[color_dict[label] for label in data_a.index],\n            explode=[0, 0.1, 0, 0],\n            autopct='%.1f%%',\n            textprops={'fontsize': 13}\n            )\n\npatches[1].set_alpha(0.3)\n# patches[2].set_visible(False)\nfor text in texts:\n    text.set_verticalalignment('bottom')\n\n\npatches, texts, autotexts = axes[1].pie(data_b,\n            labels=data_b.index,\n            colors=[color_dict[label] for label in data_b.index],\n            explode=[0, 0.1, 0, 0],\n            autopct='%.1f%%',\n            textprops={'fontsize': 13}\n            )\n    \n# hole = plt.Circle((0, 0), 0.65, facecolor='white')\n# plt.gcf().gca().add_artist(hole)\n\n\n\n\n\n\n\n\nI also stumbled on how to make a donut chart:\n\nfig, ax = plt.subplots(1, figsize=(8, 8))\n \nax.pie(\n    x=data_a, \n    labels=data_a.index,\n    colors=sns.color_palette('Set1'),\n    explode=[0, 0, 0.03, 0],\n    startangle=90\n)\nhole = plt.Circle((0, 0), 0.5, facecolor='white')\nplt.gcf().gca().add_artist(hole)"
  },
  {
    "objectID": "docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/index.html",
    "href": "docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/index.html",
    "title": "SQL EXTRACT() and Python ORD()/CHR()",
    "section": "",
    "text": "Today I was trying to retrieve the ‘year’ information from a date object in SQL and learned about this EXTRACT() function. Below is an example usage in which the ‘year’ is identified from a date string.\nSELECT EXTRACT(YEAR FROM '2024-03-18'); -- output: 2024\nIt turns out the function is very powerful in retrieving various time components from a date or datetime object. Below is the list of possible time components:\n\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\n\nHere are another two sample usages:\nSELECT EXTRACT(MINUTE FROM \"2023-03-18 22:34:21\"); -- output: 34\nSELECT EXTRACT(DAY_HOUR FROM \"2023-03-18 22:34:21\"); -- output: 1822"
  },
  {
    "objectID": "docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/index.html#a-useful-function-in-sql",
    "href": "docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/index.html#a-useful-function-in-sql",
    "title": "SQL EXTRACT() and Python ORD()/CHR()",
    "section": "",
    "text": "Today I was trying to retrieve the ‘year’ information from a date object in SQL and learned about this EXTRACT() function. Below is an example usage in which the ‘year’ is identified from a date string.\nSELECT EXTRACT(YEAR FROM '2024-03-18'); -- output: 2024\nIt turns out the function is very powerful in retrieving various time components from a date or datetime object. Below is the list of possible time components:\n\nMICROSECOND\nSECOND\nMINUTE\nHOUR\nDAY\nWEEK\nMONTH\nQUARTER\nYEAR\nSECOND_MICROSECOND\nMINUTE_MICROSECOND\nMINUTE_SECOND\nHOUR_MICROSECOND\nHOUR_SECOND\nHOUR_MINUTE\nDAY_MICROSECOND\nDAY_SECOND\nDAY_MINUTE\nDAY_HOUR\nYEAR_MONTH\n\nHere are another two sample usages:\nSELECT EXTRACT(MINUTE FROM \"2023-03-18 22:34:21\"); -- output: 34\nSELECT EXTRACT(DAY_HOUR FROM \"2023-03-18 22:34:21\"); -- output: 1822"
  },
  {
    "objectID": "docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/index.html#two-functions-in-python",
    "href": "docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/index.html#two-functions-in-python",
    "title": "SQL EXTRACT() and Python ORD()/CHR()",
    "section": "Two functions in Python",
    "text": "Two functions in Python\nThere is always a handy function in Python when you need it and here is the pair of functions, ord() and chr(), that converts a character into a number and converts the number back. Their official documentation can be found here and here.\n\nchar = 'a'\nprint(ord(char))\n\n97\n\n\n\nnum = ord(char)\nprint(chr(num))\n\na"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kunlei Lian",
    "section": "",
    "text": "I am an Operations Research Scientist and Machine Learning practitioner.\nI am currently working at Marriott Vacations Worldwide responsible for marketing campaign optimization, inventory control and revenue management. Previously, I contributed to various supply chain optimization projects at Walmart Global Technology.\nMy academic journey includes earning a Ph.D. in Industrial Engineering from the University of Arkansas, where my research centered on solving vehicle routing problems. Prior to that, I obtained both my B.S. and M.S. degrees in Industrial Engineering from Huazhong University of Science and Technology in China.\n\n\n\nMy competitive strengths:\n\nSolid academic background in Operations Research theories and techniques.\nExtensive experience in solving large-scale optimization problems in supply chain.\nDeep hands-on skills in building efficient and scalable optimization products.\n\nMy professional experience can be put into the following categories:\n\n\n\n\n\n%%{init: {'theme':'forest'}}%%\nflowchart LR\n    A[Experience] --&gt; B[Supply Chain Management]\n    A --&gt; C[Revenue/Yield Management]\n    B --&gt; E[Transportation/Logistics]\n    B --&gt; F[Fulfillment]\n    B --&gt; G[Replenishment]\n      E --&gt; J[Route/delivery optimization]\n      E --&gt; K[Shipment consolidation]\n      E --&gt; L[Job/driver scheduling]\n      E --&gt; R[Ocean procurement]\n      F --&gt; M[Warehouse inbound - item slotting/profiling]\n      F --&gt; N[Warehouse outbound - trip/pallet building]\n      G --&gt; O[Truckload optimization]\n      G --&gt; P[Order optimization]\n      G --&gt; Q[Inventory optimization]\n    C --&gt; I[Capacity Planning]\n    C --&gt; S[Propensity modeling]\n    C --&gt; H[Marketing campaign optimization]"
  },
  {
    "objectID": "index.html#background",
    "href": "index.html#background",
    "title": "Kunlei Lian",
    "section": "",
    "text": "I am an Operations Research Scientist and Machine Learning practitioner.\nI am currently working at Marriott Vacations Worldwide responsible for marketing campaign optimization, inventory control and revenue management. Previously, I contributed to various supply chain optimization projects at Walmart Global Technology.\nMy academic journey includes earning a Ph.D. in Industrial Engineering from the University of Arkansas, where my research centered on solving vehicle routing problems. Prior to that, I obtained both my B.S. and M.S. degrees in Industrial Engineering from Huazhong University of Science and Technology in China."
  },
  {
    "objectID": "index.html#strengths-and-experience",
    "href": "index.html#strengths-and-experience",
    "title": "Kunlei Lian",
    "section": "",
    "text": "My competitive strengths:\n\nSolid academic background in Operations Research theories and techniques.\nExtensive experience in solving large-scale optimization problems in supply chain.\nDeep hands-on skills in building efficient and scalable optimization products.\n\nMy professional experience can be put into the following categories:\n\n\n\n\n\n%%{init: {'theme':'forest'}}%%\nflowchart LR\n    A[Experience] --&gt; B[Supply Chain Management]\n    A --&gt; C[Revenue/Yield Management]\n    B --&gt; E[Transportation/Logistics]\n    B --&gt; F[Fulfillment]\n    B --&gt; G[Replenishment]\n      E --&gt; J[Route/delivery optimization]\n      E --&gt; K[Shipment consolidation]\n      E --&gt; L[Job/driver scheduling]\n      E --&gt; R[Ocean procurement]\n      F --&gt; M[Warehouse inbound - item slotting/profiling]\n      F --&gt; N[Warehouse outbound - trip/pallet building]\n      G --&gt; O[Truckload optimization]\n      G --&gt; P[Order optimization]\n      G --&gt; Q[Inventory optimization]\n    C --&gt; I[Capacity Planning]\n    C --&gt; S[Propensity modeling]\n    C --&gt; H[Marketing campaign optimization]"
  }
]