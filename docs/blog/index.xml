<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kunlei Lian</title>
<link>https://kunlei.github.io/docs/blog/</link>
<atom:link href="https://kunlei.github.io/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Tue, 02 Apr 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Multi-Objective Optimization and Pareto Front</title>
  <dc:creator>Kunlei Lian</dc:creator>
  <link>https://kunlei.github.io/docs/blog/posts/2024-04-02-pareto-front/</link>
  <description><![CDATA[ 




<p>I recently came across a multi-objective optimization problem at work and I need to identify the Pareto front - the set of non-dominating solutions among all the candidate solutions. I used to study multi-objective optimization problems and algorithms in my Ph.D.&nbsp;years, it is nice to actually use it in my work. In this post, I will explain some key concepts and some useful techniques:</p>
<ul>
<li>Multi-objective optimization</li>
<li>Pareto dominance and Pareto front</li>
<li>Identify Pareto front in Python</li>
</ul>
<section id="multi-objective-optimization" class="level2">
<h2 class="anchored" data-anchor-id="multi-objective-optimization">Multi-Objective Optimization</h2>
<p>Multi-objective optimization is an area of mathematical optimization that deals with problems involving more than one objective function to be optimized simultaneously. Each objective function may represent a different criterion, and these criteria often conflict with each other. The goal in multi-objective optimization is not to find a single solution that optimizes a single criterion, but rather to find solutions that achieve a satisfactory balance among all the criteria.</p>
<p>Multi-objective optimization is used in many fields where trade-offs between two or more outcomes must be negotiated, such as:</p>
<ul>
<li>Engineering Design: Optimizing design parameters for competing objectives like cost, performance, and safety.</li>
<li>Economics and Finance: Balancing return and risk in portfolio management.</li>
<li>Energy Management: Managing the trade-offs between cost, environmental impact, and efficiency.</li>
<li>Logistics and Transportation: Optimizing routes and schedules to minimize costs and time while maximizing customer satisfaction.</li>
</ul>
<p>The main challenges in multi-objective optimization include handling the complexity and computational cost of finding multiple optimal solutions, choosing appropriate methods and algorithms that fit the specific characteristics of the problem, and effectively assisting decision-makers in selecting from among the set of optimal solutions based on their preferences and the trade-offs they are willing to make.</p>
</section>
<section id="pareto-dominance-and-pareto-front" class="level2">
<h2 class="anchored" data-anchor-id="pareto-dominance-and-pareto-front">Pareto Dominance and Pareto Front</h2>
<p>A solution <img src="https://latex.codecogs.com/png.latex?x"> is said to Pareto dominate another solution <img src="https://latex.codecogs.com/png.latex?y"> if and only if:</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?x"> is no worse than <img src="https://latex.codecogs.com/png.latex?y"> in all objectives, and</li>
<li><img src="https://latex.codecogs.com/png.latex?x"> is strictly better than <img src="https://latex.codecogs.com/png.latex?y"> in at least one objective.</li>
</ol>
<p>In mathematical terms, considering a minimization problem with objectives <img src="https://latex.codecogs.com/png.latex?f_1,%20f_2,%20%5Ccdots,%20f_k">:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x"> Pareto dominates <img src="https://latex.codecogs.com/png.latex?y"> if for all <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5C%7B1,%202,%20%5Ccdots,%20k%5C%7D,%20f_i(x)%20%5Cleq%20f_i(y)"> and there exists at least one <img src="https://latex.codecogs.com/png.latex?j"> such that <img src="https://latex.codecogs.com/png.latex?f_i(x)%20%3C%20f_i(y)">.</li>
</ul>
<p>This concept allows decision-makers to sift through multiple feasible solutions to identify those that are not dominated by any other, helping them focus on the most promising solutions.</p>
<p>The <strong>Pareto front</strong> consists of all solutions that are not Pareto dominated by any other solution. These solutions are also known as Pareto optimal solutions. The Pareto front is particularly useful because it contains all possible trade-offs that a decision-maker can consider, providing a clear visualization of how one can improve one objective only at the expense of another.</p>
</section>
<section id="identify-pareto-front-in-python" class="level2">
<h2 class="anchored" data-anchor-id="identify-pareto-front-in-python">Identify Pareto Front in Python</h2>
<p>There is a package, <code>paretoset</code>, that could help us identify all the non-dominating solutions in multi-objective optimization. The installation is straightforward:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource {python} number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">pip install paretoset</span></code></pre></div>
<p>To illustrate the usage of this package, we will use a bi-objective optimization problem as an example. Suppose we identified a list of candidate solutions with corresponding objective values for this problem, as shown in the data frame below:</p>
<div id="cell-10" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-3"></span>
<span id="cb2-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ], </span>
<span id="cb2-5">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>: [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ]})</span>
<span id="cb2-6">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">obj1</th>
<th data-quarto-table-cell-role="th">obj2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.5</td>
<td>5.8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>5.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2.0</td>
<td>5.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2.5</td>
<td>4.8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>3.0</td>
<td>4.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>3.5</td>
<td>4.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>4.0</td>
<td>3.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>5.0</td>
<td>2.6</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>6.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>1.0</td>
<td>5.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>2.0</td>
<td>4.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>3.0</td>
<td>3.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>4.0</td>
<td>2.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>5.0</td>
<td>0.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>0.5</td>
<td>2.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>1.0</td>
<td>4.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>1.5</td>
<td>2.5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>2.0</td>
<td>2.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<p>Putting all the solutions in a plot creates a graph as in below:</p>
<div id="cell-12" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb3-2">ax.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb3-3">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Objective 1'</span>)</span>
<span id="cb3-4">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Objective 2'</span>)</span>
<span id="cb3-5">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'All candidate solutions'</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.iterrows():</span>
<span id="cb3-8">    ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>, (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb3-9"></span>
<span id="cb3-10">fig.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kunlei.github.io/docs/blog/posts/2024-04-02-pareto-front/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Assume we aim to maximize both objectives, it is clear that some solutions are <em>dominated</em> by other solutions. For example, the solution (0.5, 2.0) on the left is worse than the solution (2.0, 4.0) in both objectives.</p>
<p>To use the <code>paretoset</code> package, simply pass all the objectives and their corresponding objective sense to the <code>paretoset</code> class. The result will indicate which solution is a non-dominated solution.</p>
<div id="cell-14" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> paretoset <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> paretoset</span>
<span id="cb4-2"></span>
<span id="cb4-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'efficient'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> paretoset(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>]],</span>
<span id="cb4-4">                            sense<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>))</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">obj1</th>
<th data-quarto-table-cell-role="th">obj2</th>
<th data-quarto-table-cell-role="th">efficient</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.5</td>
<td>5.8</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>5.5</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2.0</td>
<td>5.0</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2.5</td>
<td>4.8</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>3.0</td>
<td>4.5</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>3.5</td>
<td>4.0</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>4.0</td>
<td>3.5</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>5.0</td>
<td>2.6</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>6.0</td>
<td>1.0</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>1.0</td>
<td>5.0</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>2.0</td>
<td>4.0</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>3.0</td>
<td>3.0</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>4.0</td>
<td>2.0</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>5.0</td>
<td>0.5</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>0.5</td>
<td>2.0</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>1.0</td>
<td>4.0</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>1.5</td>
<td>2.5</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>2.0</td>
<td>2.0</td>
<td>False</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<p>To visualize the resulting non-dominated solutions (among all the solutions), we mark them using a different color (yellow) from the dominated solutions (purple) in the graph below.</p>
<div id="cell-17" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-2">ax.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'efficient'</span>])</span>
<span id="cb6-3">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Objective 1'</span>)</span>
<span id="cb6-4">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Objective 2'</span>)</span>
<span id="cb6-5">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'All candidate solutions'</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.iterrows():</span>
<span id="cb6-8">    ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>, (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj1'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'obj2'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb6-9"></span>
<span id="cb6-10">fig.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kunlei.github.io/docs/blog/posts/2024-04-02-pareto-front/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Multi-objective optimization</category>
  <guid>https://kunlei.github.io/docs/blog/posts/2024-04-02-pareto-front/</guid>
  <pubDate>Tue, 02 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>SQL EXTRACT() and Python ORD()/CHR()</title>
  <dc:creator>Kunlei Lian</dc:creator>
  <link>https://kunlei.github.io/docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/</link>
  <description><![CDATA[ 




<section id="a-useful-function-in-sql" class="level2">
<h2 class="anchored" data-anchor-id="a-useful-function-in-sql">A useful function in SQL</h2>
<p>Today I was trying to retrieve the ‘year’ information from a date object in SQL and learned about this <code>EXTRACT()</code> function. Below is an example usage in which the ‘year’ is identified from a date string.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EXTRACT</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">YEAR</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-03-18'</span>); <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- output: 2024</span></span></code></pre></div>
<p>It turns out the function is very powerful in retrieving various time components from a date or datetime object. Below is the list of possible time components:</p>
<ul>
<li>MICROSECOND</li>
<li>SECOND</li>
<li>MINUTE</li>
<li>HOUR</li>
<li>DAY</li>
<li>WEEK</li>
<li>MONTH</li>
<li>QUARTER</li>
<li>YEAR</li>
<li>SECOND_MICROSECOND</li>
<li>MINUTE_MICROSECOND</li>
<li>MINUTE_SECOND</li>
<li>HOUR_MICROSECOND</li>
<li>HOUR_SECOND</li>
<li>HOUR_MINUTE</li>
<li>DAY_MICROSECOND</li>
<li>DAY_SECOND</li>
<li>DAY_MINUTE</li>
<li>DAY_HOUR</li>
<li>YEAR_MONTH</li>
</ul>
<p>Here are another two sample usages:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EXTRACT</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">MINUTE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"2023-03-18 22:34:21"</span>); <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- output: 34</span></span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource sql number-lines code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EXTRACT</span>(DAY_HOUR <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"2023-03-18 22:34:21"</span>); <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- output: 1822</span></span></code></pre></div>
</section>
<section id="two-functions-in-python" class="level2">
<h2 class="anchored" data-anchor-id="two-functions-in-python">Two functions in Python</h2>
<p>There is always a handy function in Python when you need it and here is the pair of functions, <code>ord()</code> and <code>chr()</code>, that converts a character into a number and converts the number back. Their official documentation can be found <a href="https://docs.python.org/3.4/library/functions.html?highlight=ord#ord">here</a> and <a href="https://docs.python.org/3.4/library/functions.html?highlight=ord#chr">here</a>.</p>
<div id="cell-10" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(char))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>97</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span>(char)</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">chr</span>(num))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <category>Matplotlib</category>
  <guid>https://kunlei.github.io/docs/blog/posts/2024-03-18-sql-extract-python-ord-chr/</guid>
  <pubDate>Mon, 18 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Synchronized Colors in Python Plots</title>
  <dc:creator>Kunlei Lian</dc:creator>
  <link>https://kunlei.github.io/docs/blog/posts/2024-02-29-plot-synchronized-colors/</link>
  <description><![CDATA[ 




<p>Today I came across a case for which I need put two figures side by side and I would like to use the same color to indicate the same element across the figures. After some searching on the internet, here is the solution I settled on.</p>
<div id="cell-2" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4">sns.set_theme()</span>
<span id="cb1-5"></span>
<span id="cb1-6">data_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dog'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rabbit'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Horse'</span>])</span>
<span id="cb1-7">data_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Horse'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fish'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cow'</span>])</span>
<span id="cb1-8"></span>
<span id="cb1-9">index_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb1-10">index_set.update(data_a.index)</span>
<span id="cb1-11">index_set.update(data_b.index)</span>
<span id="cb1-12"></span>
<span id="cb1-13">cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.get_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rainbow'</span>)</span>
<span id="cb1-14">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [cm(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(index_set)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(index_set))]</span>
<span id="cb1-15">color_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {label: color <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(index_set, colors)}</span>
<span id="cb1-16"></span>
<span id="cb1-17">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb1-18"></span>
<span id="cb1-19">patches, texts, autotexts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].pie(data_a,</span>
<span id="cb1-20">            labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_a.index,</span>
<span id="cb1-21">            colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[color_dict[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_a.index],</span>
<span id="cb1-22">            explode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb1-23">            autopct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-24">            textprops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fontsize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>}</span>
<span id="cb1-25">            )</span>
<span id="cb1-26"></span>
<span id="cb1-27">patches[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_alpha(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># patches[2].set_visible(False)</span></span>
<span id="cb1-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> text <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> texts:</span>
<span id="cb1-30">    text.set_verticalalignment(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>)</span>
<span id="cb1-31"></span>
<span id="cb1-32"></span>
<span id="cb1-33">patches, texts, autotexts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].pie(data_b,</span>
<span id="cb1-34">            labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_b.index,</span>
<span id="cb1-35">            colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[color_dict[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_b.index],</span>
<span id="cb1-36">            explode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb1-37">            autopct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-38">            textprops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fontsize'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>}</span>
<span id="cb1-39">            )</span>
<span id="cb1-40">    </span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hole = plt.Circle((0, 0), 0.65, facecolor='white')</span></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.gcf().gca().add_artist(hole)</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kunlei.github.io/docs/blog/posts/2024-02-29-plot-synchronized-colors/index_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>I also stumbled on how to make a donut chart:</p>
<div id="cell-4" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb2-2"> </span>
<span id="cb2-3">ax.pie(</span>
<span id="cb2-4">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_a, </span>
<span id="cb2-5">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data_a.index,</span>
<span id="cb2-6">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Set1'</span>),</span>
<span id="cb2-7">    explode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-8">    startangle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span></span>
<span id="cb2-9">)</span>
<span id="cb2-10">hole <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.Circle((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb2-11">plt.gcf().gca().add_artist(hole)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kunlei.github.io/docs/blog/posts/2024-02-29-plot-synchronized-colors/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>



 ]]></description>
  <category>Python</category>
  <category>Matplotlib</category>
  <guid>https://kunlei.github.io/docs/blog/posts/2024-02-29-plot-synchronized-colors/</guid>
  <pubDate>Thu, 29 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Python Virtual Environment Setup</title>
  <dc:creator>Kunlei Lian</dc:creator>
  <link>https://kunlei.github.io/docs/blog/posts/2024-02-20-python-jupyter-setup/</link>
  <description><![CDATA[ 




<p>Just save the list of commands I use frequently to create virtual environments and make them available to jupyter notebooks.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1"># create a new virtual environemnt named 'env_name'</span>
<span id="cb1-2">conda create -n 'env_name'</span>
<span id="cb1-3"></span>
<span id="cb1-4"># activate the newly created virtual environment</span>
<span id="cb1-5">conda activate 'env_name'</span>
<span id="cb1-6"></span>
<span id="cb1-7"># list all available environments</span>
<span id="cb1-8">conda env list</span>
<span id="cb1-9"></span>
<span id="cb1-10"># remove an virtual environment</span>
<span id="cb1-11">conda env remove -n 'env_name'</span>
<span id="cb1-12"></span>
<span id="cb1-13"># install ipykernel</span>
<span id="cb1-14">pip install --user ipykernel</span>
<span id="cb1-15"></span>
<span id="cb1-16"># add the virtual environment to jupyter</span>
<span id="cb1-17">python -m ipykernel install --user --name='env_name'</span>
<span id="cb1-18"></span>
<span id="cb1-19"># list available jupyter kernels</span>
<span id="cb1-20">jupyter kernelspec list</span>
<span id="cb1-21"></span>
<span id="cb1-22"># remove kernel from jupyter</span>
<span id="cb1-23">jupyter kernelspec uninstall 'env_name'</span></code></pre></div>



 ]]></description>
  <category>Python</category>
  <guid>https://kunlei.github.io/docs/blog/posts/2024-02-20-python-jupyter-setup/</guid>
  <pubDate>Tue, 20 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Site Revamp using Quarto</title>
  <dc:creator>Kunlei Lian</dc:creator>
  <link>https://kunlei.github.io/docs/blog/posts/2024-02-15-site-revamp/</link>
  <description><![CDATA[ 




<p>I have probably spent more time revamping my personal website than actually writing contents for it. Every once in a while, I would feel the site that I put up some time ago becomes too ugly to motivate me to update it. Since I have gradually used more Quarto to write my books and it also has the functionality to build website, I feel it’s time to yet again revamp my blog using Quarto. Hopefully, this is the last time.</p>



 ]]></description>
  <category>Misc</category>
  <guid>https://kunlei.github.io/docs/blog/posts/2024-02-15-site-revamp/</guid>
  <pubDate>Tue, 15 Feb 2022 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
