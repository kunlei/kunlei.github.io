---
title: Work Experience
author: Kunlei Lian
date: 08/11/2024
draft: false
categories:
  - work
format:
  html:
    code-line-numbers: true
    code-overflow: wrap
    code-block-bg: true
    code-block-border-left: true
    highlight-style: Arrow
---

## Marriott Vacations Worldwide

### Associate Director, Data Science

#### Marketing Campaign Optimization

#### Existing Owner Propensity to Repurchase

#### Interval International Supply/Demand Forecasting and Channel Allocation Optimization

#### Loan Delinquency Forecasting


## Walmart

### Principal Data Scientist

#### Truckload optimization (TLO)

**Background**

Walmart has a vast inbound network consisting of thousands of vendors and close to one hundred distribution centers (DC). As part of the replenishmnet process, store-item demands are first aggregated at DC level and then orders are placed to vendors to fulfill the demands. Note that there could be many vendors replenishing the same DC and it is necessary to optimize the order quantities at each vendor such that the total transportation cost is minimized.

In TLO, the inbound nework is divied into hundreds of thousands of lanes and TLO is optimized at the lane level. A lane is decided by an specific vendor or vendor pool (a group of vendors), and a specific destination DC or DC pool (a group of DCs).

**Problem**

Within a given lane, there are tens or hundreds of small orders are to be put onto the trucks.
Each order has an initial order quantity and the problem is to fine-tune or optimize the initial order quantities such that the truckload utilization is maximized.
There are several constraints to this problem:

- Each order has a minimum and maximum order quantities specified and the final quantity must be within the given range.
- Each order has an incremental order quantity specified and the increase or decrease in order quantities must be a multiple of the given incremental order quantity.
- An order could have multiple attributes, like source vendor, destination DC and item number. It's desired to put orders from the same vendor, or going to the same DC or containing the same item together.

The objectives:

- maximimize truckload utilization
- minimize vendor/DC/item split

**Solution**

The solution is a heuristic-based approach and its overall logic is as belows:

1. Load orders with initial quantities onto trucks using the *load generator* heuristic.
2. If the last truck capacity is under-utilized (< 10%), call load shinker *heuristic*.
3. If the last truck capacity is close to full (> 70%), call load expander *heuristic*.

The core of the optimizer is a truck loading heuristic that takes a list of orders with fixed order quantities and decides how to load them onto given number of trucks. The general logic of the algorithm is below (*load generator*):

- Identify the constraining capacity constraints, it's either weight or volume
- Sort orders in decreasing order of the constraining constraints
- Start with one truck and load orders using first-fit heuristic.

The *load shrinker* heuristic works as follows:

- Use a priority queue to save all the orders and sort them in *decreasing* order of their inventory level ((curr inventory + supply) / demand)
- In an iterative process, do the following
  - Take an order from the top of the priority queue
  - Shrink its order quantity based on the incremental order quantity
  - Invoke the *load generator* to create truckloads
  - Stop the process if the given number of trucks are fully occupied


The *load expander* heuristic works as follows:

- Use a priority queue to save all the orders and sort them in *increasing* order of their inventory level ((curr inventory + supply) / demand)
- In an iterative process, do the following
  - Take an order from the top of the priority queue
  - Expand its order quantity based on the incremental order quantity
  - Invoke the *load generator* to create truckloads
  - Stop the process if the give number of trucks are fully occupied.


#### Truck planning optimization

**Background**

Truck planning optimization works on a higher level than truckload optimization (TLO).
In Walmart's inbound network, multiple vendors could be aligned to the same ship point and truck capacities are procured at ship point level in long-term capacity planning and procurement.
In the current environment, the volume, number of trucks, going out of a ship point could vary from day to day or week to week. Any excess demands from a ship point could create urgent needs to procure extra truckload capacities on the spot, which is generally very expensive to do.

**Problem**

The optimization problem in this project is to decide on the optimal order quantities such that the total number of trucks going out of the input ship point falls within the given range.
The inputs to this problem includes:

- A list of orders with initial order quantity, lane information
- The range of total number of trucks

**Solution**

The solution uses the same *load generator* heuristic in the TLO project.
The main logic consits of the following steps:

1. Build truck loads for each lane using TLO engine
2. If total number of trucks exceeds given range, shink order quantities
   1. Use priority queue of all loads generated for all lanes, sorted them in increasing order of their truckload utilization.
   2. Keep dropping orders from chosen load until total number of loads falls within given range
3. If total number of trucks is below given range, expan order quantities
   1. Use priority queue of all orders, sorted in increasing order of their inventory health
   2. Increase order quantity for orders taken from the queue
   3. Run *load generator* for the corresponding lane and re-check its load count
   4. Repeat the process until the total load count falls within given range

#### Outbound order optimization

**Background**

In the overall replenishment process, the outbound process refers to the flow from DC to stores.
The problem faced by stores is that the receiving volumes at stores vary too much, this causes a lot of problems stores. 
For example, if the number of loads arriving at a store is too few, store labors will be under-utilized.
On the other hands, if there is excessive loads arriving at a store, extra temporary works have to be hired to unload the trucks, it is very expensive to do so and causes lots of frictions in store labor planning.
It is therefore desired to have consistent replenishment flow from DC to each store.

**Problem**

The O3 solves replenishment problem 
The inputs to this problem consists of:

- A list of store-item level orders with initial order quantities
- Input parameters
  - The pallet range for each store aligned to the DC
  - Regression parameters to turn orders into pallet counts
  - Planning/smoothening horizon, typically 7 days


**Solution**

There are three modules in the O3 optimizer:

1. Target volume optimizer based on MIP
2. Order shrinking heuristic
3. Order expanding heuristic

In the first module, the optimal target volume is decided for each store over the given planning horizon.
The problem is modeled as a network flow model and the decision variable is as follows:

- $y_{si}$ the target volume for store $s$ on day $i$, the volume is indicated by the pallet count.
- $x_{sij}$ the amount of volume flowing from day $i$ to day $j$ for store $s$.

The objective has the below components:

- to minimize the overflow of demands to the dummy day, which represents the unmet demands
- to minimize the variation of target volume over the planning horizon for each store

The constraints include:

- Flow conservation constraints - initial store volume is equal to all the outgoing volume, including the volume to itself.
- The target volume is equal to the all the incoming flow to the node
- The variation is calculated as the difference between the min and max volume across the planning horizon. Note that this is done for each store.


In the second module, order quantities are shrinked for all the stores whose target volume is smaller than the initial volume.
The workflow is as follows:

- Create and maintain a priority queue, sorted in decreasing order of the inventory health of each item
- Repeat
  - Take one item from the queue, decrease its order quantity by the incremental order quantity amount
  - Recalculate the pallet count using the regression coefficient
  - Stop when the total pallet ocunt equals to the target pallet count


In the third module, order quantities are expanded for all the stores whose target pallet count is bigger than the initial vlume.
The workflow is as follows:

- Create and maintain a priority queue, sorted in increasing order by the inventory health of each item
- Repeat
  - Take one item from the queue, increase its order quantity by the incremental order quantity amount
  - Recalculate the pallet count using the regression coefficient
  - Stop when the total pallet ocunt equals to the target pallet count


#### Network planning model for Walmart Freight Planner

**Background**


**Problem**


**Solution**




### Staff Data Scientist


### Senior Data Scientist


### Data Scientist

